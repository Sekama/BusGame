//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/InputFiles/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player_XBox"",
            ""id"": ""46e72001-cabd-4d1a-bd85-0fa202f9e09d"",
            ""actions"": [
                {
                    ""name"": ""TurnLeft"",
                    ""type"": ""Button"",
                    ""id"": ""674f7423-f301-4a5a-ad29-3f62ec1b31a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""Button"",
                    ""id"": ""c4be55de-c857-41d2-ab50-e2bf345396bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa30d395-90b6-412b-8a0c-18a6814ac9b5"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7cf9563-3653-462a-8275-3efe1ebbafbd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b1124cc-01e9-4fe2-b0ea-dcb02f696bdb"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee78a22b-4919-498f-947c-2eaf0594a44c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_XBox
        m_Player_XBox = asset.FindActionMap("Player_XBox", throwIfNotFound: true);
        m_Player_XBox_TurnLeft = m_Player_XBox.FindAction("TurnLeft", throwIfNotFound: true);
        m_Player_XBox_TurnRight = m_Player_XBox.FindAction("TurnRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_XBox
    private readonly InputActionMap m_Player_XBox;
    private IPlayer_XBoxActions m_Player_XBoxActionsCallbackInterface;
    private readonly InputAction m_Player_XBox_TurnLeft;
    private readonly InputAction m_Player_XBox_TurnRight;
    public struct Player_XBoxActions
    {
        private @InputMaster m_Wrapper;
        public Player_XBoxActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @TurnLeft => m_Wrapper.m_Player_XBox_TurnLeft;
        public InputAction @TurnRight => m_Wrapper.m_Player_XBox_TurnRight;
        public InputActionMap Get() { return m_Wrapper.m_Player_XBox; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_XBoxActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_XBoxActions instance)
        {
            if (m_Wrapper.m_Player_XBoxActionsCallbackInterface != null)
            {
                @TurnLeft.started -= m_Wrapper.m_Player_XBoxActionsCallbackInterface.OnTurnLeft;
                @TurnLeft.performed -= m_Wrapper.m_Player_XBoxActionsCallbackInterface.OnTurnLeft;
                @TurnLeft.canceled -= m_Wrapper.m_Player_XBoxActionsCallbackInterface.OnTurnLeft;
                @TurnRight.started -= m_Wrapper.m_Player_XBoxActionsCallbackInterface.OnTurnRight;
                @TurnRight.performed -= m_Wrapper.m_Player_XBoxActionsCallbackInterface.OnTurnRight;
                @TurnRight.canceled -= m_Wrapper.m_Player_XBoxActionsCallbackInterface.OnTurnRight;
            }
            m_Wrapper.m_Player_XBoxActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TurnLeft.started += instance.OnTurnLeft;
                @TurnLeft.performed += instance.OnTurnLeft;
                @TurnLeft.canceled += instance.OnTurnLeft;
                @TurnRight.started += instance.OnTurnRight;
                @TurnRight.performed += instance.OnTurnRight;
                @TurnRight.canceled += instance.OnTurnRight;
            }
        }
    }
    public Player_XBoxActions @Player_XBox => new Player_XBoxActions(this);
    public interface IPlayer_XBoxActions
    {
        void OnTurnLeft(InputAction.CallbackContext context);
        void OnTurnRight(InputAction.CallbackContext context);
    }
}
